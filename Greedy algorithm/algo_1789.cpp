/*============================================
1789. 수들의 합
[문제]
서로 다른 N개의 자연수의 합이 S라고 한다. S를 알 때, 자연수 N의 최댓값은 얼마일까?

[입력]
첫째 줄에 자연수 S(1 ≤ S ≤ 4,294,967,295)가 주어진다.

[출력]
첫째 줄에 자연수 N의 최댓값을 출력한다.

[개념]
N개의 자연수의 합으로 S를 만든다고 할 때, N이 최대값이 되기 위해선 그 자연수들은 최대한 작아야한다.
그러므로 그 자연수들은 1~k의 수 일부의 합으로 S를 만들 것이다.
그럼 1~k를 전부 사용하는 S는 1~k를 모두 더한 값이고 N의 최댓값은 k가 될 것이다.
1~k를 전부 사용하는 S보다 작은 S는 1~k 중 일부만 사용할 것이고 N의 최댓값은 k-1이 될 것이다.
따라서 k를 늘려가며 1~k를 전부 사용하는 수와 S를 비교하면 S를 구성하는 N의 최대값을 구할 수 있을 것이다.

1차 시도 - 실패
S의 범위를 계산해 unsigned int로 선언했지만 sum은 그 범위보다 클 수 있다는 것을 간과하였다.

[반례]
4294,967295

[해결법]
sum의 선언을 unsigned long int로 바꾼다.

2차 시도 - 성공!
메모리 2020KB, 시간 0ms, 코드 길이 170B
============================================*/

#include <iostream>
int main(){
	unsigned int s,cnt=0;	//S, k
	unsigned long int sum=0;	//1~k를 전부 합한 합
	std::cin >> s;		//S 입력
	while(sum<s) sum+=(++cnt);	//반복을 통해 k를 구한다. 
	if(sum!=s) cnt--;		//실제 S는 sum보다 작을 경우 k-1을 가져야 한다. sum과 같으면 k를 가진다.
	std::cout << cnt;
}